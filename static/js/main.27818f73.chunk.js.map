{"version":3,"sources":["api/api.js","features/query/querySlice.js","components/KeyValue.js","features/query/Query.js","features/stats/statsSlice.js","features/stats/Stats.js","features/global/globalSlice.js","features/settings/settingsSlice.js","features/settings/SettingsDialog.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["Api","state","getAlbums","query","a","url","isQuery","makeRequest","then","res","results","albums","deleteAlbums","ids","map","id","toString","join","getTracks","items","deleteTracks","getStats","path","method","settings","Error","fetch","headers","basicAuth","Authorization","btoa","username","password","json","this","global","QueryType","QueryState","querySlice","createSlice","name","initialState","queryState","warnings","resultType","beetsQuery","nextQueryType","resultSelected","filterString","deleteOnDisk","reducers","resultsLoaded","action","payload","resultsDeleted","filter","r","includes","clearQuery","loadError","error","startLoading","changeFilterString","changeNextQueryType","changeBeetsQuery","changeResultSelected","changeDeleteOnDisk","actions","fetchResults","dispatch","getState","api","console","message","selectResults","applyFilterString","toLowerCase","result","album","albumartist","artist","title","selectQueryState","selectQueryType","selectNextQueryType","selectBeetsQuery","selectChosenResult","find","KeyVal","label","value","Paragraph","style","Query","useSelector","queryType","chosenResult","useDispatch","someFetchActionCreator","useEffect","useFetching","Pane","marginBottom","Select","onChange","event","target","selected","SearchInput","placeholder","marginRight","Button","onClick","disabled","isLoading","paddingBottom","Alert","intent","length","display","flexDirection","alignItems","idsToDelete","deleted","Checkbox","checked","e","QueryResult","ResultDialog","warn","key","marginTop","Table","TableHeader","labels","Body","AlbumRow","TrackRow","track","Head","SearchHeaderCell","l","TextHeaderCell","Row","isSelectable","onSelect","TextCell","isNumber","year","Dialog","isShown","onCloseComplete","confirmLabel","Heading","size","genre","country","statsSlice","stats","Stats","SettingsState","globalSlice","getSettings","showSettings","settingsChanged","showSettingsDialog","hideSettingsDialog","areSettingsPresent","shouldShowSettings","settingsJSON","localStorage","getItem","JSON","parse","storeSettings","setItem","stringify","SettingsTestStatus","settingsSlice","basicAuthEnabled","test","status","changeUrl","changeBasicAuthEnabled","changeUsername","changePassword","completedTest","err","isBasicAuthEnabled","selectWipSettings","selectNewSettings","selectTestStatus","SettingsDialog","canClose","wipSettings","validSettings","testStatus","hasClose","shouldCloseOnEscapePress","shouldCloseOnOverlayClick","isConfirmDisabled","onConfirm","onOpenComplete","TextInputField","description","newSettings","TestResult","TickCircleIcon","color","BanCircleIcon","App","settingsPresent","justifyContent","background","borderRadius","width","padding","flex","marginLeft","configureStore","reducer","queryReducer","statsReducer","settingsReducer","globalReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8RAAqBA,EACjB,WAAYC,GAAQ,IAAD,gCAInBC,UAJmB,uCAIP,WAAOC,GAAP,eAAAC,EAAA,6DACFC,EAAMC,EAAQH,GAAS,gBAAkBA,EAAQ,SAD/C,SAGK,EAAKI,YAAYF,GAAKG,MAAK,SAACC,GAAD,OACpCH,EAAQH,GAASM,EAAIC,QAAUD,EAAIE,UAJ/B,mFAJO,2DAYnBC,aAZmB,uCAYJ,WAAOC,GAAP,SAAAT,EAAA,sEACE,EAAKG,YACd,UAAYM,EAAIC,KAAI,SAACC,GAAD,OAAQA,EAAGC,cAAYC,KAAK,KAChD,UAHO,mFAZI,2DAmBnBC,UAnBmB,uCAmBP,WAAOf,GAAP,eAAAC,EAAA,6DACFC,EAAMF,GAAmB,KAAVA,EAAe,eAAiBA,EAAQ,QADrD,SAGK,EAAKI,YAAYF,GAAKG,MAAK,SAACC,GAAD,OACpCH,EAAQH,GAASM,EAAIC,QAAUD,EAAIU,SAJ/B,mFAnBO,2DA2BnBC,aA3BmB,uCA2BJ,WAAOP,GAAP,SAAAT,EAAA,sEACE,EAAKG,YACd,SAAWM,EAAIC,KAAI,SAACC,GAAD,OAAQA,EAAGC,cAAYC,KAAK,KAC/C,UAHO,mFA3BI,2DAkCnBI,SAlCmB,sBAkCR,sBAAAjB,EAAA,sEACM,EAAKG,YAAY,UADvB,mFAlCQ,KAsCnBA,YAtCmB,uCAsCL,WAAOe,EAAMC,GAAb,SAAAnB,EAAA,yDACL,EAAKoB,SADA,sBAEA,IAAIC,MAAM,gCAFV,cAKVF,EAASA,GAAU,MALT,kBAOHG,MAAM,EAAKF,SAASnB,IAAMiB,EAAM,CACnCC,OAAQA,EACRI,QAAS,EAAKH,SAASI,UACjB,CACIC,cACI,SACAC,KACI,EAAKN,SAASI,UAAUG,SACpB,IACA,EAAKP,SAASI,UAAUI,WAGxC,KACPxB,MAAK,SAACC,GAAD,OAASA,EAAIwB,WApBX,2CAtCK,wDACfC,KAAKV,SAAWvB,EAAMkC,OAAOX,SAASA,UA6DxClB,EAAU,SAACH,GAAD,OAAWA,GAAmB,KAAVA,GC5DvBiC,EACK,eADLA,EAEK,eAGLC,EACA,UADAA,EAEA,UAFAA,EAGF,QAHEA,EAIA,UAGAC,EAAaC,YAAY,CAClCC,KAAM,QACNC,aAAc,CACVC,WAAY,CACRzC,MAAOoC,EACPM,SAAU,GACVC,WAAYR,GAEhBS,WAAY,GACZC,cAAeV,EACfW,eAAgB,KAChBC,aAAc,KACdC,cAAc,GAElBC,SAAU,CACNC,cAAe,SAAClD,EAAOmD,GACnBnD,EAAMyC,WAAa,CACfzC,MAAOoC,EACP3B,QAAS0C,EAAOC,QAChBT,WAAY3C,EAAM6C,gBAG1BQ,eAAgB,SAACrD,EAAOmD,GACpBnD,EAAMyC,WAAWhC,QAAUT,EAAMyC,WAAWhC,QAAQ6C,QAChD,SAACC,GAAD,OAAQJ,EAAOC,QAAQI,SAASD,EAAEzC,QAG1C2C,WAAY,SAACzD,GACTA,EAAM8C,eAAiB,KACvB9C,EAAM+C,aAAe,KACrB/C,EAAMyC,WAAa,CAAEzC,MAAOoC,IAEhCsB,UAAW,SAAC1D,EAAOmD,GACfnD,EAAMyC,WAAa,CACfzC,MAAOoC,EACPuB,MAAOR,EAAOC,UAGtBQ,aAAc,SAAC5D,EAAOmD,GAClBnD,EAAMyC,WAAa,CACfzC,MAAOoC,EACPM,SACyB,KAArB1C,EAAM4C,WACA,CACI,kFAEJ,KAGlBiB,mBAAoB,SAAC7D,EAAOmD,GACxBnD,EAAM+C,aAAkC,KAAnBI,EAAOC,QAAiB,KAAOD,EAAOC,SAE/DU,oBAAqB,SAAC9D,EAAOmD,GACzBnD,EAAM6C,cAAgBM,EAAOC,SAEjCW,iBAAkB,SAAC/D,EAAOmD,GACtBnD,EAAM4C,WAAaO,EAAOC,SAE9BY,qBAAsB,SAAChE,EAAOmD,GAC1BnD,EAAM8C,eAAiBK,EAAOC,SAElCa,mBAAoB,SAACjE,EAAOmD,GACxBnD,EAAMgD,aAAeG,EAAOC,Y,EAgBpCf,EAAW6B,QAVXhB,E,EAAAA,cACAG,E,EAAAA,eACAK,E,EAAAA,UACAD,E,EAAAA,WACAI,E,EAAAA,mBACAC,E,EAAAA,oBACAC,E,EAAAA,iBACAC,E,EAAAA,qBACAC,E,EAAAA,mBACAL,E,EAAAA,aAKSO,EAAe,WACxB,8CAAO,WAAOC,EAAUC,GAAjB,mBAAAlE,EAAA,kEAECiE,EAASR,KAEH5D,EAAQqE,IACRC,EAAM,IAAIvE,EAAIC,GAGhBA,EAAME,MAAM2C,gBAAkBV,EARnC,iCASqBmC,EAAIrE,UAAUD,EAAME,MAAM0C,YAT/C,OASKnC,EATL,gDAWqB6D,EAAIrD,UAAUjB,EAAME,MAAM0C,YAX/C,QAWKnC,EAXL,eAcC2D,EAASlB,EAAczC,IAdxB,kDAgBC8D,QAAQZ,MAAR,MAEAS,EAASV,EAAU,KAAIc,UAlBxB,0DAAP,yDA0DSC,EAAgB,SAACzE,GAC1B,OAAIA,EAAME,MAAMuC,WAAWzC,QAAUoC,EAC1B,KAGJpC,EAAME,MAAM6C,aACb/C,EAAME,MAAMuC,WAAWhC,QAAQ6C,QAAO,SAACC,GAAD,OAClCmB,EACInB,EACAvD,EAAME,MAAM6C,aAAa4B,cACzB3E,EAAME,MAAMuC,WAAWE,eAG/B3C,EAAME,MAAMuC,WAAWhC,SAG3BiE,EAAoB,SAACE,EAAQ7B,EAAcJ,GAC7C,OAAQA,GACJ,KAAKR,EACD,OACIyC,EAAOC,MAAMF,cAAcnB,SAAST,IACpC6B,EAAOE,YAAYH,cAAcnB,SAAST,GAElD,KAAKZ,EACL,QACI,OACIyC,EAAOC,MAAMF,cAAcnB,SAAST,IACpC6B,EAAOG,OAAOJ,cAAcnB,SAAST,IACrC6B,EAAOI,MAAML,cAAcnB,SAAST,KAIvCkC,EAAmB,SAACjF,GAAD,OAAWA,EAAME,MAAMuC,YAC1CyC,EAAkB,SAAClF,GAAD,OAAWA,EAAME,MAAMuC,WAAWE,YACpDwC,EAAsB,SAACnF,GAAD,OAAWA,EAAME,MAAM2C,eAC7CuC,EAAmB,SAACpF,GAAD,OAAWA,EAAME,MAAM0C,YAC1CyC,EAAqB,SAACrF,GAAD,OAC9BA,EAAME,MAAMuC,WAAWzC,QAAUoC,EAC3BpC,EAAME,MAAMuC,WAAWhC,QAAQ6E,MAC3B,SAAC/B,GAAD,OAAOA,EAAEzC,KAAOd,EAAME,MAAM4C,kBAEhC,MAEKT,IAAf,Q,SCpMe,SAASkD,EAAT,GAAmC,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,MACpC,OACI,kBAACC,EAAA,EAAD,KACI,0BAAMC,MAAO,CAAE,cAAe,OAAQ,gBAAiB,QAClDH,GAGJC,GAAS,WCgCf,SAASG,IACZ,IAAMnF,EAAUoF,YAAYpB,GACtBhC,EAAaoD,YAAYZ,GACzBa,EAAYD,YAAYX,GACxBrC,EAAgBgD,YAAYV,GAC5BvC,EAAaiD,YAAYT,GACzBW,EAAeF,YAAYR,GAC3BrC,EAAe6C,aAAY,SAAC7F,GAAD,OAAWA,EAAME,MAAM8C,gBAElDoB,EAAW4B,cAIjB,OArBgB,SAACC,GACjB,IAAM7B,EAAW4B,cAEjBE,qBAAU,WACN9B,EAAS6B,OACV,CAAC7B,EAAU6B,IAcdE,CAAYhC,GAGR,kBAACiC,EAAA,EAAD,KACI,kBAACA,EAAA,EAAD,CAAMC,aAAc,IAChB,kBAACC,EAAA,EAAD,CACIb,MAAO5C,EACP0D,SAAU,SAACC,GAAD,OACNpC,EAASN,EAAoB0C,EAAMC,OAAOhB,UAG9C,4BAAQA,MAAM,eAAeiB,UAAQ,GAArC,UAGA,4BAAQjB,MAAM,gBAAd,WAGJ,kBAACkB,EAAA,EAAD,CACIC,YAAY,iBACZnB,MAAO7C,EACP2D,SAAU,SAACC,GAAD,OACNpC,EAASL,EAAiByC,EAAMC,OAAOhB,SAE3CoB,YAAa,IAEjB,kBAACC,EAAA,EAAD,CACIC,QAAS,kBAAM3C,EAASD,MACxB6C,SAAUvE,EAAWzC,QAAUoC,EAC/B6E,UAAWxE,EAAWzC,QAAUoC,GAHpC,cASJ,6BAECK,EAAWzC,QAAUoC,GAClB,kBAACgE,EAAA,EAAD,CAAMc,cAAe,IACjB,kBAACC,EAAA,EAAD,CACIC,OAAO,UACPpC,MAAO,kBAAoBvE,EAAQ4G,OAAS,cAGhD,kBAACjB,EAAA,EAAD,CACIkB,QAAS,OACTC,cAAe,MACfC,WAAY,UAEZ,kBAACV,EAAA,EAAD,CACIC,QAAS,kBAAM3C,EAASX,MACxBoD,YAAa,IAFjB,eAMA,kBAACT,EAAA,EAAD,CACIkB,QAAS,OACTC,cAAe,MACfC,WAAY,UAEZ,kBAACV,EAAA,EAAD,CACIC,QAAS,kBAAM3C,EFS3C,uCAAO,WAAOA,EAAUC,GAAjB,qBAAAlE,EAAA,kEAEOH,EAAQqE,IACRC,EAAM,IAAIvE,EAAIC,GAEdyH,EAAczH,EAAME,MAAMuC,WAAWhC,QAAQI,KAAI,SAAC0C,GAAD,OAAOA,EAAEzC,MAG5Dd,EAAME,MAAM2C,gBAAkBV,EARnC,iCASoBmC,EAAI3D,aACf8G,EACAzH,EAAME,MAAM8C,cAXrB,OASK4B,EATL,gDAcoBN,EAAInD,aACfsG,EACAzH,EAAME,MAAM8C,cAhBrB,QAcK4B,EAdL,eAoBKA,EAAO8C,QACPtD,EAASf,EAAeoE,IAExBrD,EAASV,EAAU,sCAvBxB,kDA0BCa,QAAQZ,MAAR,MAEAS,EAASV,EAAU,KAAIc,UA5BxB,0DAAP,0DER4BqC,YAAa,GACbO,OAAQ,UAHZ,cAQA,kBAACO,EAAA,EAAD,CACInC,MAAM,4BACNoC,QAAS5E,EACTuD,SAAU,SAACsB,GAAD,OACNzD,EACIH,EAAmB4D,EAAEpB,OAAOmB,gBASxD,kBAACE,GAAD,CAAarF,WAAYA,IAEzB,kBAACsF,GAAD,CAAcnD,OAAQmB,EAAcD,UAAWA,KAK3D,SAASgC,GAAT,GAAsC,IAAfrF,EAAc,EAAdA,WACnB,OAAQA,EAAWzC,OACf,KAAKoC,EACD,OACI,kBAAC,WAAD,KACI,kBAAC+E,EAAA,EAAD,CAAOC,OAAO,OAAOpC,MAAO,qBAC3BvC,EAAWC,SAAS7B,KAAI,SAACmH,EAAMC,GAAP,OACrB,kBAACd,EAAA,EAAD,CACIc,IAAKA,EACLb,OAAO,UACPpC,MAAOgD,EACPE,UAAW,QAK/B,KAAK9F,EACD,OAAO,kBAAC+E,EAAA,EAAD,CAAOC,OAAO,SAASpC,MAAOvC,EAAWkB,QACpD,KAAKvB,EACD,OACI,kBAAC+F,EAAA,EAAD,KACI,kBAACC,GAAD,CACIC,OACI5F,EAAWE,aAAeR,EACpB,CAAC,SAAU,QACX,CAAC,SAAU,QAAS,UAIlC,kBAACgG,EAAA,EAAMG,KAAP,KACK7F,EAAWhC,QAAQI,KAAI,SAACgE,GAAD,OACpBpC,EAAWE,aAAeR,EACtB,kBAACoG,GAAD,CAAUN,IAAKpD,EAAM/D,GAAI+D,MAAOA,IAEhC,kBAAC2D,GAAD,CAAUP,IAAKpD,EAAM/D,GAAI2H,MAAO5D,SAMxD,KAAKzC,EACL,QACI,OACI,kBAAC+E,EAAA,EAAD,CACIC,OAAO,OACPpC,MAAO,wCAM3B,SAASoD,GAAT,GAAkC,IAAXC,EAAU,EAAVA,OACbjE,EAAW4B,cAEjB,OACI,kBAACmC,EAAA,EAAMO,KAAP,KACI,kBAACP,EAAA,EAAMQ,iBAAP,CACIpC,SAAU,SAACd,GAAD,OAAWrB,EAASP,EAAmB4B,OAEpD4C,EAAOxH,KAAI,SAAC+H,GAAD,OACR,kBAACT,EAAA,EAAMU,eAAP,CAAsBZ,IAAKW,GAAIA,OAM/C,SAASL,GAAT,GAA8B,IAAV1D,EAAS,EAATA,MACVT,EAAW4B,cAEjB,OACI,kBAACmC,EAAA,EAAMW,IAAP,CACIC,cAAY,EACZC,SAAU,kBAAM5E,EAASJ,EAAqBa,EAAM/D,OAEpD,kBAACqH,EAAA,EAAMc,SAAP,KAAiBpE,EAAMA,OACvB,kBAACsD,EAAA,EAAMc,SAAP,KAAiBpE,EAAMC,aACvB,kBAACqD,EAAA,EAAMc,SAAP,CAAgBC,UAAQ,GAAErE,EAAMsE,OAK5C,SAASX,GAAT,GAA8B,IAAVC,EAAS,EAATA,MACVrE,EAAW4B,cAEjB,OACI,kBAACmC,EAAA,EAAMW,IAAP,CACIC,cAAY,EACZC,SAAU,kBAAM5E,EAASJ,EAAqByE,EAAM3H,OAEpD,kBAACqH,EAAA,EAAMc,SAAP,KAAiBR,EAAMzD,OACvB,kBAACmD,EAAA,EAAMc,SAAP,KAAiBR,EAAM1D,QACvB,kBAACoD,EAAA,EAAMc,SAAP,KAAiBR,EAAM5D,OACvB,kBAACsD,EAAA,EAAMc,SAAP,CAAgBC,UAAQ,GAAET,EAAMU,OAK5C,SAASpB,GAAT,GAA8C,IAAtBjC,EAAqB,EAArBA,UAAWlB,EAAU,EAAVA,OACzBR,EAAW4B,cAEjB,OACI,kBAACoD,EAAA,EAAD,CACIC,UAAWzE,EACXI,MAAOc,IAAc3D,EAAyB,QAAU,QACxDmH,gBAAiB,kBAAMlF,EAASJ,EAAqB,QACrDuF,aAAa,QAEV3E,EACCkB,IAAc3D,EACV,6BACI,kBAACqH,EAAA,EAAD,CAASC,KAAM,IAAKpD,aAAc,GAC7BzB,EAAOC,MADZ,KACqBD,EAAOuE,KAD5B,KAGA,kBAACK,EAAA,EAAD,CAASC,KAAM,IAAKpD,aAAc,IAC7BzB,EAAOE,aAEZ,kBAACS,EAAD,CAAQC,MAAM,QAAQC,MAAOb,EAAO8E,QACpC,kBAACnE,EAAD,CAAQC,MAAM,UAAUC,MAAOb,EAAO+E,UACtC,kBAACpE,EAAD,CAAQC,MAAM,QAAQC,MAAOb,EAAOY,SAGxC,6BACI,kBAACgE,EAAA,EAAD,CAASC,KAAM,IAAKpD,aAAc,GAC7BzB,EAAOI,MADZ,KACqBJ,EAAOuE,KAD5B,KAGA,kBAACK,EAAA,EAAD,CAASC,KAAM,IAAKpD,aAAc,IAC7BzB,EAAOG,OADZ,KACsBH,EAAOC,OAG7B,kBAACU,EAAD,CAAQC,MAAM,QAAQC,MAAOb,EAAO8E,QACpC,kBAACnE,EAAD,CAAQC,MAAM,UAAUC,MAAOb,EAAO+E,UACtC,kBAACpE,EAAD,CAAQC,MAAM,QAAQC,MAAOb,EAAOY,SAI5C,+BCjRT,IAAMoE,GAAatH,YAAY,CAClCC,KAAM,QACNC,aAAc,CAAE/B,QAAS,MACzBwC,SAAU,CACNC,cAAe,SAAClD,EAAOmD,GACnBnD,EAAMS,QAAU0C,EAAOC,YAKpBF,GAAkB0G,GAAW1F,QAA7BhB,cAEFiB,GAAe,WACxB,8CAAO,WAAOC,EAAUC,GAAjB,eAAAlE,EAAA,+EAEuB,IAAIJ,EAAIsE,KAAYjD,WAF3C,OAEOX,EAFP,OAIC2D,EAASlB,GAAczC,IAJxB,gDAMC8D,QAAQZ,MAAR,MAND,yDAAP,yDAWSc,GAAgB,SAACzE,GAAD,OAAWA,EAAM6J,MAAMpJ,SAErCmJ,MAAf,QCdO,SAASE,KACZ,IAAMrJ,EAAUoF,YAAYpB,IAI5B,OAbgB,SAACwB,GACjB,IAAM7B,EAAW4B,cAEjBE,qBAAU,WACN9B,EAAS6B,OACV,CAAC7B,EAAU6B,IAMdE,CAAYhC,IAEH1D,EACL,6BACI,kBAAC8E,EAAD,CAAQC,MAAO,SAAUC,MAAOhF,EAAQC,SACxC,kBAAC6E,EAAD,CAAQC,MAAO,SAAUC,MAAOhF,EAAQS,SAG5C,kBAACwE,EAAA,EAAD,yB,kCCxBKqE,GACA,UADAA,GAED,SAGCC,GAAc1H,YAAY,CACnCC,KAAM,SACNC,aAAc,CAAEjB,SAAU0I,KAAeC,cAAc,GACvDjH,SAAU,CACNkH,gBAAiB,SAACnK,EAAOmD,GACrBnD,EAAMuB,SAAW,CACbvB,MAAO+J,GACPxI,SAAU4B,EAAOC,SAErBpD,EAAMkK,cAAe,GAEzBE,mBAAoB,SAACpK,GACjBA,EAAMkK,cAAe,GAEzBG,mBAAoB,SAACrK,GACjBA,EAAMkK,cAAe,M,GAS7BF,GAAY9F,QAHZiG,G,GAAAA,gBACAC,G,GAAAA,mBACAC,G,GAAAA,mBAESC,GAAqB,SAACtK,GAAD,OAC9BA,EAAMkC,OAAOX,SAASvB,QAAU+J,IAEvBQ,GAAqB,SAACvK,GAAD,OAC9BA,EAAMkC,OAAOX,SAASvB,QAAU+J,IAChC/J,EAAMkC,OAAOgI,cAEFF,MAAf,QAeO,SAASC,KACZ,IAAMO,EAAeC,aAAaC,QAAQ,kBAE1C,OAAKF,EAGM,CACHxK,MAAO+J,GACPxI,SAAUoJ,KAAKC,MAAMJ,IAJlB,CAAExK,MAAO+J,GAAsBxI,SAAU,MASxD,SAASsJ,GAActJ,GACnBkJ,aAAaK,QAAQ,iBAAkBH,KAAKI,UAAUxJ,EAASA,WChE5D,IAAMyJ,GACA,UADAA,GAED,SAFCA,GAGA,UAGAC,GAAgB3I,YAAY,CACrCC,KAAM,WACNC,aAAc,CACVpC,IAAK,GACL8K,kBAAkB,EAClBpJ,SAAU,GACVC,SAAU,GACVoJ,KAAM,CAAEC,OAAQJ,KAEpB/H,SAAU,CACNoI,UAAW,SAACrL,EAAOmD,GACfnD,EAAMI,IAAM+C,EAAOC,QACnBpD,EAAMmL,KAAO,CAAEC,OAAQJ,KAE3BM,uBAAwB,SAACtL,EAAOmD,GAC5BnD,EAAMkL,iBAAmB/H,EAAOC,QAChCpD,EAAMmL,KAAO,CAAEC,OAAQJ,KAE3BO,eAAgB,SAACvL,EAAOmD,GACpBnD,EAAM8B,SAAWqB,EAAOC,QACxBpD,EAAMmL,KAAO,CAAEC,OAAQJ,KAE3BQ,eAAgB,SAACxL,EAAOmD,GACpBnD,EAAM+B,SAAWoB,EAAOC,QACxBpD,EAAMmL,KAAO,CAAEC,OAAQJ,KAE3BS,cAAe,SAACzL,EAAOmD,GACfA,EAAOC,QAAQwB,OACf5E,EAAMmL,KAAO,CAAEC,OAAQJ,IAEvBhL,EAAMmL,KAAO,CACTC,OAAQJ,GACRrH,MAAOR,EAAOC,QAAQsI,S,GAiCtCT,GAAc/G,QALdmH,G,GAAAA,UACAC,G,GAAAA,uBACAC,G,GAAAA,eACAC,G,GAAAA,eACAC,G,GAAAA,cAGSE,GAAqB,SAAC3L,GAAD,OAAWA,EAAMuB,SAAS2J,kBAE/CU,GAAoB,SAAC5L,GAC9B,MAAO,CACHI,IAAKJ,EAAMuB,SAASnB,IACpB8K,iBAAkBlL,EAAMuB,SAAS2J,iBACjCpJ,SAAU9B,EAAMuB,SAASO,SACzBC,SAAU/B,EAAMuB,SAASQ,WA8BpB8J,GAAoB,SAAC7L,GAC9B,MAA2B,KAAvBA,EAAMuB,SAASnB,KAIfJ,EAAMuB,SAAS2J,kBAAgD,KAA5BlL,EAAMuB,SAASO,SAH3C,KAOJ,CACH1B,IAAKJ,EAAMuB,SAASnB,IACpBuB,UAAW3B,EAAMuB,SAAS2J,iBACpB,CACIpJ,SAAU9B,EAAMuB,SAASO,SACzBC,SAAU/B,EAAMuB,SAASQ,UAE7B,OAID+J,GAAmB,SAAC9L,GAC7B,OAAOA,EAAMuB,SAAS4J,MAGXF,MAAf,QC/GO,SAASc,GAAT,GAAgD,IAAtB1C,EAAqB,EAArBA,QAAS2C,EAAY,EAAZA,SAChCC,EAAcpG,YAAY+F,IAC1BM,EAAgBrG,YAAYgG,IAC5BX,EAAmBrF,YAAY8F,IAC/BQ,EAAatG,YAAYiG,IAEzB1H,EAAW4B,cAEjB,OACI,kBAACoD,EAAA,EAAD,CACIpE,MAAO,WACPqE,QAASA,EACT+C,SAAUJ,EACVK,yBAA0BL,EAC1BM,0BAA2BN,EAC3BO,mBACKL,GACDC,EAAWf,SAAWJ,GAE1BwB,UAAW,kBAAMpI,GFLA7C,EEKsB2K,EFJ/C,uCAAO,WAAO9H,GAAP,SAAAjE,EAAA,sDACH,IACI0K,GAAc,CAAEtJ,aAEhB6C,EAAS+F,GAAgB5I,IAC3B,MAAOmK,GACLnH,QAAQZ,MAAM+H,GANf,2CAAP,wDADwB,IAACnK,GEMjBkL,eAAgB,kBAAMrI,EDG9B,uCAAO,WAAOA,GAAP,eAAAjE,EAAA,sDACH,IACUoB,EAAW0I,KAEjB7F,EAASiH,GAAU9J,EAASA,SAASnB,MAEjCmB,EAASA,SAASI,WAClByC,EAASkH,IAAuB,IAChClH,EAASoH,GAAejK,EAASA,SAASQ,WAC1CqC,EAASmH,GAAehK,EAASA,SAASO,YAE1CsC,EAASkH,IAAuB,IAEtC,MAAOI,GACLnH,QAAQZ,MAAM+H,GAdf,2CAAP,wDCFQpC,gBAAiB,kBAAMlF,EAASiG,QAEhC,6BACI,kBAACqC,GAAA,EAAD,CACIlH,MAAM,YACNmH,YAAY,oEACZ/F,YAAY,wBACZnB,MAAOwG,EAAY7L,IACnBmG,SAAU,SAACC,GAAD,OACNpC,EAASiH,GAAU7E,EAAMC,OAAOhB,WAIxC,kBAACkC,EAAA,EAAD,CACIC,QAASqE,EAAYf,iBACrB3E,SAAU,SAACsB,GAAD,OACNzD,EAASkH,GAAuBzD,EAAEpB,OAAOmB,WAE7CpC,MAAM,sCAGT0F,GACG,kBAACwB,GAAA,EAAD,CACIlH,MAAM,WACNmH,YAAY,qCACZ/F,YAAY,QACZnB,MAAOwG,EAAYnK,SACnByE,SAAU,SAACC,GAAD,OACNpC,EAASmH,GAAe/E,EAAMC,OAAOhB,WAKhDyF,GACG,kBAACwB,GAAA,EAAD,CACIlH,MAAM,WACNmH,YAAY,qCACZ/F,YAAY,cACZnB,MAAOwG,EAAYlK,SACnBwE,SAAU,SAACC,GAAD,OACNpC,EAASoH,GAAehF,EAAMC,OAAOhB,YAMrD,kBAACqB,EAAA,EAAD,CACIE,UAAWkF,EACXnF,QAAS,kBAAM3C,EDP3B,uCAAO,WAAOA,EAAUC,GAAjB,mBAAAlE,EAAA,sEAEOyM,EAAcf,GAAkBxH,KAEhCC,EAAM,IAAIvE,EAAI,CAChBmC,OAAQ,CAAEX,SAAU,CAAEA,SAAUqL,MALrC,SAQqBtI,EAAIlD,WARzB,OAQOyI,EARP,OAWKzF,EAASqH,GADT5B,EACuB,CAAEjF,QAAQ,GAGf,CAAEA,QAAQ,EAAO8G,IAAK,uBAd7C,gDAkBCnH,QAAQZ,MAAR,MAEAS,EAASqH,GAAc,CAAE7G,QAAQ,EAAO8G,IAAK,KAAIlH,WApBlD,yDAAP,0DCQY6B,aAAc,IAHlB,mBAQA,kBAACwG,GAAD,CAAYzB,OAAQe,KAKhC,SAASU,GAAT,GAAiC,IAAXzB,EAAU,EAAVA,OAClB,OAAQA,EAAOA,QACX,KAAKJ,GACD,OACI,kBAAC5E,EAAA,EAAD,CAAMkB,QAAS,OAAQE,WAAY,UAC/B,kBAACsF,GAAA,EAAD,CAAgBC,MAAM,UAAUlG,YAAa,IAE7C,kBAACnB,EAAA,EAAD,+BAGZ,KAAKsF,GACD,OACI,kBAAC5E,EAAA,EAAD,CAAMkB,QAAS,OAAQE,WAAY,UAC/B,kBAACwF,GAAA,EAAD,CAAeD,MAAM,SAASlG,YAAa,IAE3C,kBAACnB,EAAA,EAAD,2BAA+B0F,EAAOzH,QAGlD,KAAKqH,GACL,QACI,OAAO,kBAACtF,EAAA,EAAD,OCxEJuH,OA3Cf,WACI,IAAM/C,EAAerE,YAAY0E,IAC3B2C,EAAkBrH,YAAYyE,IAC9BlG,EAAW4B,cAEjB,OACI,kBAACI,EAAA,EAAD,CACIkB,QAAQ,OACRC,cAAc,SACd4F,eAAe,aACf3F,WAAW,UAEX,kBAACpB,EAAA,EAAD,CACIkB,QAAQ,OACR8F,WAAW,QACXC,aAAc,EACdC,MAAM,OACNC,QAAS,GACTJ,eAAgB,iBAEhB,kBAAC/G,EAAA,EAAD,CAAMoH,KAAM,EAAGhG,WAAW,SAASF,QAAQ,QACvC,kBAACkC,EAAA,EAAD,CAASC,KAAM,KAAf,aAEJ,kBAACrD,EAAA,EAAD,CAAMkB,QAAS,QACV4F,GAAmB,kBAACpD,GAAD,MACpB,kBAAChD,EAAA,EAAD,CACIC,QAAS,kBAAM3C,EAASgG,OACxBqD,WAAY,IAFhB,cASR,kBAACrH,EAAA,EAAD,CAAMkH,MAAM,OAAOC,QAAS,IACvBL,GAAmB,kBAACtH,EAAD,OAGxB,kBAACmG,GAAD,CAAgB1C,QAASa,EAAc8B,SAAUkB,MC5C9CQ,eAAe,CAC1BC,QAAS,CACLzN,MAAO0N,EACP/D,MAAOgE,GACPtM,SAAUuM,GACV5L,OAAQ6L,MCCIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUC,MAAOA,IACf,kBAAC,GAAD,QAGJC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtO,MAAK,SAAAuO,GACjCA,EAAaC,iB","file":"static/js/main.27818f73.chunk.js","sourcesContent":["export default class Api {\n    constructor(state) {\n        this.settings = state.global.settings.settings;\n    }\n\n    getAlbums = async (query) => {\n        const url = isQuery(query) ? \"/album/query/\" + query : \"/album\";\n\n        return await this.makeRequest(url).then((res) =>\n            isQuery(query) ? res.results : res.albums\n        );\n    };\n\n    deleteAlbums = async (ids) => {\n        return await this.makeRequest(\n            \"/album/\" + ids.map((id) => id.toString()).join(\",\"),\n            \"DELETE\"\n        );\n    };\n\n    getTracks = async (query) => {\n        const url = query && query !== \"\" ? \"/item/query/\" + query : \"/item\";\n\n        return await this.makeRequest(url).then((res) =>\n            isQuery(query) ? res.results : res.items\n        );\n    };\n\n    deleteTracks = async (ids) => {\n        return await this.makeRequest(\n            \"/item/\" + ids.map((id) => id.toString()).join(\",\"),\n            \"DELETE\"\n        );\n    };\n\n    getStats = async () => {\n        return await this.makeRequest(\"/stats\");\n    };\n\n    makeRequest = async (path, method) => {\n        if (!this.settings) {\n            throw new Error(\"Settings not yet initialised\");\n        }\n\n        method = method || \"GET\";\n\n        return fetch(this.settings.url + path, {\n            method: method,\n            headers: this.settings.basicAuth\n                ? {\n                      Authorization:\n                          \"Basic \" +\n                          btoa(\n                              this.settings.basicAuth.username +\n                                  \":\" +\n                                  this.settings.basicAuth.password\n                          ),\n                  }\n                : {},\n        }).then((res) => res.json());\n    };\n}\n\nconst isQuery = (query) => query && query !== \"\";\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport Api from \"../../api/api\";\n\nexport const QueryType = {\n    QUERY_ALBUMS: \"QUERY_ALBUMS\",\n    QUERY_TRACKS: \"QUERY_TRACKS\",\n};\n\nexport const QueryState = {\n    NOT_RUN: \"NOT_RUN\",\n    LOADING: \"LOADING\",\n    ERROR: \"ERROR\",\n    SUCCESS: \"SUCCESS\",\n};\n\nexport const querySlice = createSlice({\n    name: \"query\",\n    initialState: {\n        queryState: {\n            state: QueryState.LOADING,\n            warnings: [],\n            resultType: QueryType.QUERY_ALBUMS,\n        },\n        beetsQuery: \"\",\n        nextQueryType: QueryType.QUERY_ALBUMS,\n        resultSelected: null,\n        filterString: null,\n        deleteOnDisk: true,\n    },\n    reducers: {\n        resultsLoaded: (state, action) => {\n            state.queryState = {\n                state: QueryState.SUCCESS,\n                results: action.payload,\n                resultType: state.nextQueryType,\n            };\n        },\n        resultsDeleted: (state, action) => {\n            state.queryState.results = state.queryState.results.filter(\n                (r) => !action.payload.includes(r.id)\n            );\n        },\n        clearQuery: (state) => {\n            state.resultSelected = null;\n            state.filterString = null;\n            state.queryState = { state: QueryState.NOT_RUN };\n        },\n        loadError: (state, action) => {\n            state.queryState = {\n                state: QueryState.ERROR,\n                error: action.payload,\n            };\n        },\n        startLoading: (state, action) => {\n            state.queryState = {\n                state: QueryState.LOADING,\n                warnings:\n                    state.beetsQuery === \"\"\n                        ? [\n                              \"This query may take a long time. Try making it more specific before searching.\",\n                          ]\n                        : [],\n            };\n        },\n        changeFilterString: (state, action) => {\n            state.filterString = action.payload === \"\" ? null : action.payload;\n        },\n        changeNextQueryType: (state, action) => {\n            state.nextQueryType = action.payload;\n        },\n        changeBeetsQuery: (state, action) => {\n            state.beetsQuery = action.payload;\n        },\n        changeResultSelected: (state, action) => {\n            state.resultSelected = action.payload;\n        },\n        changeDeleteOnDisk: (state, action) => {\n            state.deleteOnDisk = action.payload;\n        },\n    },\n});\n\nexport const {\n    resultsLoaded,\n    resultsDeleted,\n    loadError,\n    clearQuery,\n    changeFilterString,\n    changeNextQueryType,\n    changeBeetsQuery,\n    changeResultSelected,\n    changeDeleteOnDisk,\n    startLoading,\n} = querySlice.actions;\n\n// Thunks\n\nexport const fetchResults = () => {\n    return async (dispatch, getState) => {\n        try {\n            dispatch(startLoading());\n\n            const state = getState();\n            const api = new Api(state);\n\n            let results;\n            if (state.query.nextQueryType === QueryType.QUERY_ALBUMS) {\n                results = await api.getAlbums(state.query.beetsQuery);\n            } else {\n                results = await api.getTracks(state.query.beetsQuery);\n            }\n\n            dispatch(resultsLoaded(results));\n        } catch (err) {\n            console.error(err);\n\n            dispatch(loadError(err.message));\n        }\n    };\n};\n\nexport const deleteResults = () => {\n    return async (dispatch, getState) => {\n        try {\n            const state = getState();\n            const api = new Api(state);\n\n            const idsToDelete = state.query.queryState.results.map((r) => r.id);\n\n            let result;\n            if (state.query.nextQueryType === QueryType.QUERY_ALBUMS) {\n                result = await api.deleteAlbums(\n                    idsToDelete,\n                    state.query.deleteOnDisk\n                );\n            } else {\n                result = await api.deleteTracks(\n                    idsToDelete,\n                    state.query.deleteOnDisk\n                );\n            }\n\n            if (result.deleted) {\n                dispatch(resultsDeleted(idsToDelete));\n            } else {\n                dispatch(loadError(\"Could not delete results of query\"));\n            }\n        } catch (err) {\n            console.error(err);\n\n            dispatch(loadError(err.message));\n        }\n    };\n};\n\n// Selectors\nexport const selectResults = (state) => {\n    if (state.query.queryState.state !== QueryState.SUCCESS) {\n        return null;\n    }\n\n    return state.query.filterString\n        ? state.query.queryState.results.filter((r) =>\n              applyFilterString(\n                  r,\n                  state.query.filterString.toLowerCase(),\n                  state.query.queryState.resultType\n              )\n          )\n        : state.query.queryState.results;\n};\n\nconst applyFilterString = (result, filterString, resultType) => {\n    switch (resultType) {\n        case QueryType.QUERY_ALBUMS:\n            return (\n                result.album.toLowerCase().includes(filterString) ||\n                result.albumartist.toLowerCase().includes(filterString)\n            );\n        case QueryType.QUERY_TRACKS:\n        default:\n            return (\n                result.album.toLowerCase().includes(filterString) ||\n                result.artist.toLowerCase().includes(filterString) ||\n                result.title.toLowerCase().includes(filterString)\n            );\n    }\n};\nexport const selectQueryState = (state) => state.query.queryState;\nexport const selectQueryType = (state) => state.query.queryState.resultType;\nexport const selectNextQueryType = (state) => state.query.nextQueryType;\nexport const selectBeetsQuery = (state) => state.query.beetsQuery;\nexport const selectChosenResult = (state) =>\n    state.query.queryState.state === QueryState.SUCCESS\n        ? state.query.queryState.results.find(\n              (r) => r.id === state.query.resultSelected\n          )\n        : null;\n\nexport default querySlice.reducer;\n","import { Paragraph } from \"evergreen-ui\";\nimport React from \"react\";\n\nexport default function KeyVal({ label, value }) {\n    return (\n        <Paragraph>\n            <span style={{ \"font-weight\": \"bold\", \"padding-right\": \"1em\" }}>\n                {label}\n            </span>\n\n            {value || \"Unknown\"}\n        </Paragraph>\n    );\n}\n","import { useDispatch, useSelector } from \"react-redux\";\nimport React, { Fragment, useEffect } from \"react\";\nimport {\n    Alert,\n    Button,\n    Checkbox,\n    Dialog,\n    Heading,\n    Pane,\n    SearchInput,\n    Select,\n    Table,\n} from \"evergreen-ui\";\nimport {\n    changeBeetsQuery,\n    changeDeleteOnDisk,\n    changeFilterString,\n    changeNextQueryType,\n    changeResultSelected,\n    clearQuery,\n    deleteResults,\n    fetchResults,\n    QueryState,\n    QueryType,\n    selectBeetsQuery,\n    selectChosenResult,\n    selectNextQueryType,\n    selectQueryState,\n    selectQueryType,\n    selectResults,\n} from \"./querySlice\";\nimport KeyVal from \"../../components/KeyValue\";\n\n// https://stackoverflow.com/a/58061735\nconst useFetching = (someFetchActionCreator) => {\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(someFetchActionCreator());\n    }, [dispatch, someFetchActionCreator]);\n};\n\nexport function Query() {\n    const results = useSelector(selectResults);\n    const queryState = useSelector(selectQueryState);\n    const queryType = useSelector(selectQueryType);\n    const nextQueryType = useSelector(selectNextQueryType);\n    const beetsQuery = useSelector(selectBeetsQuery);\n    const chosenResult = useSelector(selectChosenResult);\n    const deleteOnDisk = useSelector((state) => state.query.deleteOnDisk);\n\n    const dispatch = useDispatch();\n\n    useFetching(fetchResults);\n\n    return (\n        <Pane>\n            <Pane marginBottom={24}>\n                <Select\n                    value={nextQueryType}\n                    onChange={(event) =>\n                        dispatch(changeNextQueryType(event.target.value))\n                    }\n                >\n                    <option value=\"QUERY_ALBUMS\" selected>\n                        Albums\n                    </option>\n                    <option value=\"QUERY_TRACKS\">Tracks</option>\n                </Select>\n\n                <SearchInput\n                    placeholder=\"Beets query...\"\n                    value={beetsQuery}\n                    onChange={(event) =>\n                        dispatch(changeBeetsQuery(event.target.value))\n                    }\n                    marginRight={8}\n                />\n                <Button\n                    onClick={() => dispatch(fetchResults())}\n                    disabled={queryState.state === QueryState.LOADING}\n                    isLoading={queryState.state === QueryState.LOADING}\n                >\n                    Run query\n                </Button>\n            </Pane>\n\n            <hr />\n\n            {queryState.state === QueryState.SUCCESS && (\n                <Pane paddingBottom={16}>\n                    <Alert\n                        intent=\"success\"\n                        title={\"Query returned \" + results.length + \" results.\"}\n                    />\n\n                    <Pane\n                        display={\"flex\"}\n                        flexDirection={\"row\"}\n                        alignItems={\"center\"}\n                    >\n                        <Button\n                            onClick={() => dispatch(clearQuery())}\n                            marginRight={16}\n                        >\n                            Clear query\n                        </Button>\n                        <Pane\n                            display={\"flex\"}\n                            flexDirection={\"row\"}\n                            alignItems={\"center\"}\n                        >\n                            <Button\n                                onClick={() => dispatch(deleteResults())}\n                                marginRight={16}\n                                intent={\"danger\"}\n                            >\n                                Remove all\n                            </Button>\n\n                            <Checkbox\n                                label=\"Also delete files on disk\"\n                                checked={deleteOnDisk}\n                                onChange={(e) =>\n                                    dispatch(\n                                        changeDeleteOnDisk(e.target.checked)\n                                    )\n                                }\n                            />\n                        </Pane>\n                    </Pane>\n                </Pane>\n            )}\n\n            <QueryResult queryState={queryState} />\n\n            <ResultDialog result={chosenResult} queryType={queryType} />\n        </Pane>\n    );\n}\n\nfunction QueryResult({ queryState }) {\n    switch (queryState.state) {\n        case QueryState.LOADING:\n            return (\n                <Fragment>\n                    <Alert intent=\"none\" title={\"Running query...\"} />\n                    {queryState.warnings.map((warn, key) => (\n                        <Alert\n                            key={key}\n                            intent=\"warning\"\n                            title={warn}\n                            marginTop={8}\n                        />\n                    ))}\n                </Fragment>\n            );\n        case QueryState.ERROR:\n            return <Alert intent=\"danger\" title={queryState.error} />;\n        case QueryState.SUCCESS:\n            return (\n                <Table>\n                    <TableHeader\n                        labels={\n                            queryState.resultType === QueryType.QUERY_ALBUMS\n                                ? [\"Artist\", \"Year\"]\n                                : [\"Artist\", \"Album\", \"Year\"]\n                        }\n                    />\n\n                    <Table.Body>\n                        {queryState.results.map((album) =>\n                            queryState.resultType === QueryType.QUERY_ALBUMS ? (\n                                <AlbumRow key={album.id} album={album} />\n                            ) : (\n                                <TrackRow key={album.id} track={album} />\n                            )\n                        )}\n                    </Table.Body>\n                </Table>\n            );\n        case QueryState.NOT_RUN:\n        default:\n            return (\n                <Alert\n                    intent=\"none\"\n                    title={\"Enter a query above to see results\"}\n                />\n            );\n    }\n}\n\nfunction TableHeader({ labels }) {\n    const dispatch = useDispatch();\n\n    return (\n        <Table.Head>\n            <Table.SearchHeaderCell\n                onChange={(value) => dispatch(changeFilterString(value))}\n            />\n            {labels.map((l) => (\n                <Table.TextHeaderCell key={l}>{l}</Table.TextHeaderCell>\n            ))}\n        </Table.Head>\n    );\n}\n\nfunction AlbumRow({ album }) {\n    const dispatch = useDispatch();\n\n    return (\n        <Table.Row\n            isSelectable\n            onSelect={() => dispatch(changeResultSelected(album.id))}\n        >\n            <Table.TextCell>{album.album}</Table.TextCell>\n            <Table.TextCell>{album.albumartist}</Table.TextCell>\n            <Table.TextCell isNumber>{album.year}</Table.TextCell>\n        </Table.Row>\n    );\n}\n\nfunction TrackRow({ track }) {\n    const dispatch = useDispatch();\n\n    return (\n        <Table.Row\n            isSelectable\n            onSelect={() => dispatch(changeResultSelected(track.id))}\n        >\n            <Table.TextCell>{track.title}</Table.TextCell>\n            <Table.TextCell>{track.artist}</Table.TextCell>\n            <Table.TextCell>{track.album}</Table.TextCell>\n            <Table.TextCell isNumber>{track.year}</Table.TextCell>\n        </Table.Row>\n    );\n}\n\nfunction ResultDialog({ queryType, result }) {\n    const dispatch = useDispatch();\n\n    return (\n        <Dialog\n            isShown={!!result}\n            title={queryType === QueryType.QUERY_ALBUMS ? \"Album\" : \"Track\"}\n            onCloseComplete={() => dispatch(changeResultSelected(null))}\n            confirmLabel=\"Done\"\n        >\n            {!!result ? (\n                queryType === QueryType.QUERY_ALBUMS ? (\n                    <div>\n                        <Heading size={600} marginBottom={8}>\n                            {result.album} ({result.year})\n                        </Heading>\n                        <Heading size={500} marginBottom={16}>\n                            {result.albumartist}\n                        </Heading>\n                        <KeyVal label=\"Genre\" value={result.genre} />\n                        <KeyVal label=\"Country\" value={result.country} />\n                        <KeyVal label=\"Label\" value={result.label} />\n                    </div>\n                ) : (\n                    <div>\n                        <Heading size={600} marginBottom={8}>\n                            {result.title} ({result.year})\n                        </Heading>\n                        <Heading size={500} marginBottom={16}>\n                            {result.artist}, {result.album}\n                        </Heading>\n\n                        <KeyVal label=\"Genre\" value={result.genre} />\n                        <KeyVal label=\"Country\" value={result.country} />\n                        <KeyVal label=\"Label\" value={result.label} />\n                    </div>\n                )\n            ) : (\n                <div />\n            )}\n        </Dialog>\n    );\n}\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport Api from \"../../api/api\";\n\nexport const statsSlice = createSlice({\n    name: \"stats\",\n    initialState: { results: null },\n    reducers: {\n        resultsLoaded: (state, action) => {\n            state.results = action.payload;\n        },\n    },\n});\n\nexport const { resultsLoaded } = statsSlice.actions;\n\nexport const fetchResults = () => {\n    return async (dispatch, getState) => {\n        try {\n            const results = await new Api(getState()).getStats();\n\n            dispatch(resultsLoaded(results));\n        } catch (err) {\n            console.error(err);\n        }\n    };\n};\n\nexport const selectResults = (state) => state.stats.results;\n\nexport default statsSlice.reducer;\n","import { useDispatch, useSelector } from \"react-redux\";\nimport { fetchResults, selectResults } from \"./statsSlice\";\nimport React, { useEffect } from \"react\";\nimport { Paragraph } from \"evergreen-ui\";\nimport KeyVal from \"../../components/KeyValue\";\n\n// https://stackoverflow.com/a/58061735\nconst useFetching = (someFetchActionCreator) => {\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(someFetchActionCreator());\n    }, [dispatch, someFetchActionCreator]);\n};\n\nexport function Stats() {\n    const results = useSelector(selectResults);\n\n    useFetching(fetchResults);\n\n    return !!results ? (\n        <div>\n            <KeyVal label={\"Albums\"} value={results.albums} />\n            <KeyVal label={\"Tracks\"} value={results.items} />\n        </div>\n    ) : (\n        <Paragraph>Loading stats...</Paragraph>\n    );\n}\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const SettingsState = {\n    PRESENT: \"PRESENT\",\n    ABSENT: \"ABSENT\",\n};\n\nexport const globalSlice = createSlice({\n    name: \"global\",\n    initialState: { settings: getSettings(), showSettings: false },\n    reducers: {\n        settingsChanged: (state, action) => {\n            state.settings = {\n                state: SettingsState.PRESENT,\n                settings: action.payload,\n            };\n            state.showSettings = false;\n        },\n        showSettingsDialog: (state) => {\n            state.showSettings = true;\n        },\n        hideSettingsDialog: (state) => {\n            state.showSettings = false;\n        },\n    },\n});\n\nexport const {\n    settingsChanged,\n    showSettingsDialog,\n    hideSettingsDialog,\n} = globalSlice.actions;\nexport const areSettingsPresent = (state) =>\n    state.global.settings.state === SettingsState.PRESENT;\n\nexport const shouldShowSettings = (state) =>\n    state.global.settings.state === SettingsState.ABSENT ||\n    state.global.showSettings;\n\nexport default globalSlice.reducer;\n\nexport const saveSettings = (settings) => {\n    return async (dispatch) => {\n        try {\n            storeSettings({ settings });\n\n            dispatch(settingsChanged(settings));\n        } catch (err) {\n            console.error(err);\n        }\n    };\n};\n\n// Store to/from local storage\nexport function getSettings() {\n    const settingsJSON = localStorage.getItem(\"beets:settings\");\n\n    if (!settingsJSON) {\n        return { state: SettingsState.ABSENT, settings: null };\n    } else {\n        return {\n            state: SettingsState.PRESENT,\n            settings: JSON.parse(settingsJSON),\n        };\n    }\n}\n\nfunction storeSettings(settings) {\n    localStorage.setItem(\"beets:settings\", JSON.stringify(settings.settings));\n}\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport { getSettings } from \"../global/globalSlice\";\nimport Api from \"../../api/api\";\n\nexport const SettingsTestStatus = {\n    SUCCESS: \"SUCCESS\",\n    FAILED: \"FAILED\",\n    NOT_RUN: \"NOT_RUN\",\n};\n\nexport const settingsSlice = createSlice({\n    name: \"settings\",\n    initialState: {\n        url: \"\",\n        basicAuthEnabled: false,\n        username: \"\",\n        password: \"\",\n        test: { status: SettingsTestStatus.NOT_RUN },\n    },\n    reducers: {\n        changeUrl: (state, action) => {\n            state.url = action.payload;\n            state.test = { status: SettingsTestStatus.NOT_RUN };\n        },\n        changeBasicAuthEnabled: (state, action) => {\n            state.basicAuthEnabled = action.payload;\n            state.test = { status: SettingsTestStatus.NOT_RUN };\n        },\n        changeUsername: (state, action) => {\n            state.username = action.payload;\n            state.test = { status: SettingsTestStatus.NOT_RUN };\n        },\n        changePassword: (state, action) => {\n            state.password = action.payload;\n            state.test = { status: SettingsTestStatus.NOT_RUN };\n        },\n        completedTest: (state, action) => {\n            if (action.payload.result) {\n                state.test = { status: SettingsTestStatus.SUCCESS };\n            } else {\n                state.test = {\n                    status: SettingsTestStatus.FAILED,\n                    error: action.payload.err,\n                };\n            }\n        },\n    },\n});\n\nexport const loadSettings = () => {\n    return async (dispatch) => {\n        try {\n            const settings = getSettings();\n\n            dispatch(changeUrl(settings.settings.url));\n\n            if (settings.settings.basicAuth) {\n                dispatch(changeBasicAuthEnabled(true));\n                dispatch(changePassword(settings.settings.password));\n                dispatch(changeUsername(settings.settings.username));\n            } else {\n                dispatch(changeBasicAuthEnabled(false));\n            }\n        } catch (err) {\n            console.error(err);\n        }\n    };\n};\n\nexport const {\n    changeUrl,\n    changeBasicAuthEnabled,\n    changeUsername,\n    changePassword,\n    completedTest,\n} = settingsSlice.actions;\n\nexport const isBasicAuthEnabled = (state) => state.settings.basicAuthEnabled;\n\nexport const selectWipSettings = (state) => {\n    return {\n        url: state.settings.url,\n        basicAuthEnabled: state.settings.basicAuthEnabled,\n        username: state.settings.username,\n        password: state.settings.password,\n    };\n};\n\nexport const testNewSettings = () => {\n    return async (dispatch, getState) => {\n        try {\n            const newSettings = selectNewSettings(getState());\n\n            const api = new Api({\n                global: { settings: { settings: newSettings } },\n            });\n\n            const stats = await api.getStats();\n\n            if (stats) {\n                dispatch(completedTest({ result: true }));\n            } else {\n                dispatch(\n                    completedTest({ result: false, err: \"Could not connect\" })\n                );\n            }\n        } catch (err) {\n            console.error(err);\n\n            dispatch(completedTest({ result: false, err: err.message }));\n        }\n    };\n};\n\nexport const selectNewSettings = (state) => {\n    if (state.settings.url === \"\") {\n        return null;\n    }\n\n    if (state.settings.basicAuthEnabled && state.settings.username === \"\") {\n        return null;\n    }\n\n    return {\n        url: state.settings.url,\n        basicAuth: state.settings.basicAuthEnabled\n            ? {\n                  username: state.settings.username,\n                  password: state.settings.password,\n              }\n            : null,\n    };\n};\n\nexport const selectTestStatus = (state) => {\n    return state.settings.test;\n};\n\nexport default settingsSlice.reducer;\n","import { useDispatch, useSelector } from \"react-redux\";\nimport {\n    BanCircleIcon,\n    Button,\n    Checkbox,\n    Dialog,\n    Pane,\n    Paragraph,\n    TextInputField,\n    TickCircleIcon,\n} from \"evergreen-ui\";\nimport React from \"react\";\nimport {\n    changeBasicAuthEnabled,\n    changePassword,\n    changeUrl,\n    changeUsername,\n    isBasicAuthEnabled,\n    loadSettings,\n    selectNewSettings,\n    selectTestStatus,\n    selectWipSettings,\n    SettingsTestStatus,\n    testNewSettings,\n} from \"./settingsSlice\";\nimport { hideSettingsDialog, saveSettings } from \"../global/globalSlice\";\n\nexport function SettingsDialog({ isShown, canClose }) {\n    const wipSettings = useSelector(selectWipSettings);\n    const validSettings = useSelector(selectNewSettings);\n    const basicAuthEnabled = useSelector(isBasicAuthEnabled);\n    const testStatus = useSelector(selectTestStatus);\n\n    const dispatch = useDispatch();\n\n    return (\n        <Dialog\n            title={\"Settings\"}\n            isShown={isShown}\n            hasClose={canClose}\n            shouldCloseOnEscapePress={canClose}\n            shouldCloseOnOverlayClick={canClose}\n            isConfirmDisabled={\n                !validSettings ||\n                testStatus.status !== SettingsTestStatus.SUCCESS\n            }\n            onConfirm={() => dispatch(saveSettings(validSettings))}\n            onOpenComplete={() => dispatch(loadSettings())}\n            onCloseComplete={() => dispatch(hideSettingsDialog())}\n        >\n            <div>\n                <TextInputField\n                    label=\"Beets URL\"\n                    description=\"The URL of your Beets API instance. Include the protocol and port\"\n                    placeholder=\"http://localhost:8000\"\n                    value={wipSettings.url}\n                    onChange={(event) =>\n                        dispatch(changeUrl(event.target.value))\n                    }\n                />\n\n                <Checkbox\n                    checked={wipSettings.basicAuthEnabled}\n                    onChange={(e) =>\n                        dispatch(changeBasicAuthEnabled(e.target.checked))\n                    }\n                    label=\"Enable HTTP basic authentication?\"\n                />\n\n                {basicAuthEnabled && (\n                    <TextInputField\n                        label=\"Username\"\n                        description=\"Your basic authentication username\"\n                        placeholder=\"admin\"\n                        value={wipSettings.username}\n                        onChange={(event) =>\n                            dispatch(changeUsername(event.target.value))\n                        }\n                    />\n                )}\n\n                {basicAuthEnabled && (\n                    <TextInputField\n                        label=\"Password\"\n                        description=\"Your basic authentication password\"\n                        placeholder=\"password123\"\n                        value={wipSettings.password}\n                        onChange={(event) =>\n                            dispatch(changePassword(event.target.value))\n                        }\n                    />\n                )}\n            </div>\n\n            <Button\n                disabled={!validSettings}\n                onClick={() => dispatch(testNewSettings())}\n                marginBottom={16}\n            >\n                Test connection\n            </Button>\n\n            <TestResult status={testStatus} />\n        </Dialog>\n    );\n}\n\nfunction TestResult({ status }) {\n    switch (status.status) {\n        case SettingsTestStatus.SUCCESS:\n            return (\n                <Pane display={\"flex\"} alignItems={\"center\"}>\n                    <TickCircleIcon color=\"success\" marginRight={8} />\n\n                    <Paragraph>Connection successful</Paragraph>\n                </Pane>\n            );\n        case SettingsTestStatus.FAILED:\n            return (\n                <Pane display={\"flex\"} alignItems={\"center\"}>\n                    <BanCircleIcon color=\"danger\" marginRight={8} />\n\n                    <Paragraph>Connection failed: {status.error}</Paragraph>\n                </Pane>\n            );\n        case SettingsTestStatus.NOT_RUN:\n        default:\n            return <Paragraph/>;\n    }\n}\n","import React from \"react\";\nimport { Button, Heading, Pane } from \"evergreen-ui\";\nimport { Query } from \"./features/query/Query\";\nimport { Stats } from \"./features/stats/Stats\";\nimport { SettingsDialog } from \"./features/settings/SettingsDialog\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n    areSettingsPresent,\n    shouldShowSettings,\n    showSettingsDialog,\n} from \"./features/global/globalSlice\";\n\nfunction App() {\n    const showSettings = useSelector(shouldShowSettings);\n    const settingsPresent = useSelector(areSettingsPresent);\n    const dispatch = useDispatch();\n\n    return (\n        <Pane\n            display=\"flex\"\n            flexDirection=\"column\"\n            justifyContent=\"flex-start\"\n            alignItems=\"center\"\n        >\n            <Pane\n                display=\"flex\"\n                background=\"tint2\"\n                borderRadius={3}\n                width=\"100%\"\n                padding={16}\n                justifyContent={\"space-between\"}\n            >\n                <Pane flex={1} alignItems=\"center\" display=\"flex\">\n                    <Heading size={600}>Beets UI</Heading>\n                </Pane>\n                <Pane display={\"flex\"}>\n                    {settingsPresent && <Stats />}\n                    <Button\n                        onClick={() => dispatch(showSettingsDialog())}\n                        marginLeft={16}\n                    >\n                        Settings\n                    </Button>\n                </Pane>\n            </Pane>\n\n            <Pane width=\"100%\" padding={16}>\n                {settingsPresent && <Query />}\n            </Pane>\n\n            <SettingsDialog isShown={showSettings} canClose={settingsPresent} />\n        </Pane>\n    );\n}\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport queryReducer from \"../features/query/querySlice\";\nimport statsReducer from \"../features/stats/statsSlice\";\nimport globalReducer from \"../features/global/globalSlice\";\nimport settingsReducer from \"../features/settings/settingsSlice\";\n\nexport default configureStore({\n    reducer: {\n        query: queryReducer,\n        stats: statsReducer,\n        settings: settingsReducer,\n        global: globalReducer,\n    },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}